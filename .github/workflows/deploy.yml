name: Build, Test, Deploy

on:
  push:
    branches: [main]

env:
  DOCKER_HUB_REPO: sashi20014/supplier-service
  AWS_EC2_HOST: ${{ secrets.AWS_EC2_PUBLIC_IP }}
  AWS_EC2_SSH_KEY: ${{ secrets.AWS_EC2_SSH_PRIVATE_KEY }}
  SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Setup Java (required for SonarCloud)
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      # Setup Node.js
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Run unit tests
      - name: Run unit tests
        run: npm test

      # SonarCloud analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >
            -Dsonar.organization=sashi153
            -Dsonar.projectKey=supplier-service
            -Dsonar.javascript.node.version=18

      # Build Docker image
      - name: Build Docker image
        run: docker build -t $DOCKER_HUB_REPO:${{ github.sha }} .

      # Login to Docker Hub
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      # Push to Docker Hub
      - name: Push to Docker Hub
        run: docker push $DOCKER_HUB_REPO:${{ github.sha }}

  deploy-to-ec2:
    needs: build-test-scan
    runs-on: ubuntu-latest
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          # Properly format the private key with newlines
          echo "${{ secrets.AWS_EC2_SSH_PRIVATE_KEY }}" | sed 's/\\n/\n/g' > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key

          # Add EC2 to known_hosts
          ssh-keyscan ${{ secrets.AWS_EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

          # Verify SSH connection works
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key ubuntu@${{ secrets.AWS_EC2_PUBLIC_IP }} "echo 'SSH successful!'"

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key ubuntu@${{ secrets.AWS_EC2_PUBLIC_IP }} << 'ENDSSH'
          # Login to Docker Hub
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

          # Define image reference
          IMAGE_REF="$DOCKER_HUB_REPO:${{ github.sha }}"

          # Verify image reference format
          if [[ ! "$IMAGE_REF" =~ ^[a-zA-Z0-9._-]+/[a-zA-Z0-9._-]+:[a-zA-Z0-9._-]+$ ]]; then
          echo "ERROR: Invalid Docker image reference format: $IMAGE_REF"
          exit 1
          fi

          # Pull the image (force pull to ensure latest version)
          docker pull "$IMAGE_REF" || {
          echo "ERROR: Failed to pull Docker image"
          exit 1
          }

          # Stop and remove existing container if it exists
          if docker ps -a --format '{{.Names}}' | grep -q '^supplier-service$'; then
            docker stop supplier-service || true
            docker rm supplier-service || true
          fi

          # Run new container
          docker run -d \
              --name supplier-service \
              -p 5003:5003 \
              -e DATABASE_URL="$DATABASE_URL" \
              "$IMAGE_REF" || {
              echo "ERROR: Failed to start container"
              exit 1
          }

          # Verify deployment
          echo "Current containers:"
          docker ps -a
          echo "Container logs:"
          docker logs supplier-service --tail 50
          ENDSSH
